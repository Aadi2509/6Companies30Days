//Solution Accepted in GFG

//Initial template for C++
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template in C++

class Solution
{
    public:
    //Function to find total number of unique paths.
    void DFS(vector<vector<int>> &vis,int i,int j,int &count,int a,int b){
        if(i==a-1 && j==b-1){
            count++;
            return;
        }
        
        vis[i][j]=0;
        
        int dx[2]={0,1};
        int dy[2]={1,0};
        
        for(int k=0;k<2;k++){
            int nx=i+dx[k];
            int ny=j+dy[k];
            
            if(nx>=a || ny>=b){
                continue;
            }
            
            if(vis[nx][ny]!=1){
                DFS(vis,nx,ny,count,a,b);
            }
        }
        
        vis[i][j]=0;
    }
    
    int NumberOfPath(int a, int b)
    {
        //code here
        int count=0;
        vector<vector<int>> visited;
        vector<int> v;
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                v.push_back(0);
            }
            visited.push_back(v);
        }
        
        if(visited[0][0]!=1){
            DFS(visited,0,0,count,a,b);
        }
        
        return count;
    }
};


// { Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking dimensions of the matrix
        int a,b;
        cin>>a>>b;
        Solution ob;
        //calling NumberOfPath() function
        cout << ob.NumberOfPath(a,b) << endl;
    }
}

  // } Driver Code Ends