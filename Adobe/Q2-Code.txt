//Solution Accepted in GFG

//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
//User function template for C++

class Solution{   
public:
    int lengthOfLongestAP(int A[], int n) {
        // code here
        if(n==1){
            return 1;
        }
        if(n==2){
            return 2;
        }
        vector<unordered_map<int,int>> mapVector(n);
        int mx=1;
        
        
        
        for(int i=1;i<n;i++){
            //unordered_map<int,int> mp;
            // if(i==0){
            //     continue;
            // }else{
            
            for(int j=0;j<i;j++){
                int diff=A[i]-A[j];
                
                //unordered_map<int ,int> prevMp;
                //mapVector[j];
                
                if(mapVector[j].find(diff)!=mapVector[j].end()){
                    int toBeAdded=0;
                    toBeAdded=mapVector[j][diff];
                    toBeAdded++;
                    
                    mx=max(mx,toBeAdded);
                    
                    mapVector[i][diff]=toBeAdded;
                }else{
                    mapVector[i][diff]=1;
                }
                // mapVector[i][diff]++;
                // mapVector[i][diff]+=toBeAdded;
                
            }
            
        }
        
        
        return (mx+1);
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int A[n];
        for (int i = 0; i < n; i++) {
            cin >> A[i];
        }
        Solution ob;
        auto ans = ob.lengthOfLongestAP(A, n);
        cout << ans << "\n";
    }
    return 0;
}  // } Driver Code Ends