//Solution Accepted in leetcode

/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    
    Node* Solve(vector<vector<int>>& grid,int rowStart,int rowEnd,int colStart,int colEnd,int f)
    {
        int add=0;
        for(int i=rowStart;i<rowEnd;i++)
        {
            for(int j=colStart;j<colEnd;j++)
            {
                add+=grid[i][j];
            }
        }
        Node* ans;
        if(add==0)
            ans=new Node(false,true);
        else if(add==(f*f))
            ans=new Node(true,true);
        else
        {
            ans=new Node(false,false);
            f=f/2;
            ans->topLeft = Solve(grid,rowStart,rowStart+f,colStart,colStart+f,f);
            ans->topRight = Solve(grid,rowStart,rowStart+f,colStart+f,colEnd,f);
            ans->bottomLeft = Solve(grid,rowStart+f,rowEnd,colStart,colStart+f,f);
            ans->bottomRight = Solve(grid,rowStart+f,rowEnd,colStart+f,colEnd,f);
        }
        return ans;
        
    }   
    
    Node* construct(vector<vector<int>>& grid) {
        //Node *root= new Node();
        int n=grid.size();
        Node* ans = Solve(grid,0,n,0,n,n);
        return ans;
        
    }
};