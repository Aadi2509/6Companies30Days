//Solution Accepted in leetcode

class Solution {
public:
    int requireZeros(int n,int i){
        return n-i-1;
    }
    
    int minSwaps(vector<vector<int>>& grid) {
        int n=grid.size();
        vector<int> v;
        int swaps=0;
        for(int i=0;i<n;i++){
            int j=n-1;
            int count=0;
            while(j>=0){
                if(grid[i][j]==0){
                    count++;
                }else{
                    break;
                }
                j--;
            }
            v.push_back(count);
        }
        
        for(int i=0;i<n;i++){
            cout<<v[i]<<" "; 
        }
        
        for(int i=0;i<n;i++){
            int req=requireZeros(n,i);
            if(v[i]<req){
                int j=i;
                while(j<n && v[j]<req){
                    j++;
                }
                
                if(j==n){
                    return -1;
                }
                
                while(i<j){
                    int temp=v[j];
                    v[j]=v[j-1];
                    v[j-1]=temp;
                    swaps++;
                    j--;
                }
            }
        }
        
        return swaps;
    }
};