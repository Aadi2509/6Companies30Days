//Solution accepted in leetcode

/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
public:
    int findPeakEle(MountainArray &mountainArr,int start,int end,int len){
        
          while(start<end){
                        int mid=start+(end-start)/2;
                        if(mountainArr.get(mid)<mountainArr.get(mid+1)){
                                start=mid+1;
                        }
                        else{
                                end=mid;
                        }
                }
                return start;
    }
    
    int binarySearch(MountainArray &mountainArr,int start,int end,int k,int len){
        int res=-1;
        while(start<=end){
            int mid=start+((end-start)/2);
            if(mountainArr.get(mid)==k){
                res=mid;
                break;
            }else if(mountainArr.get(mid)>k){
                end=mid-1;
            }else{
                start=mid+1;
            }
        }
        return res;
    }
    
    int binarySearchInverted(MountainArray &mountainArr,int start,int end,int k,int len){
        int res=-1;
        while(start<=end){
            int mid=start+((end-start)/2);
            if(mountainArr.get(mid)==k){
                res=mid;
                break;
            }else if(mountainArr.get(mid)>k){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return res;
    }
    
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int len=mountainArr.length();
//         for(int i=0;i<val;i++){
//             if(mountainArr.get(i)==target){
//                 return i;
//             }
//         }
        
//         return -1;
        
        int peakIndex=findPeakEle(mountainArr,0,len-1,len);
        if(mountainArr.get(peakIndex)==target){
            return peakIndex;
        }
        int left=binarySearch(mountainArr,0,peakIndex,target,len);
        //int right=binarySearchInverted(mountainArr,peakIndex,len-1,target,len);
        if(left==-1){
            //Search right side
            int right=binarySearchInverted(mountainArr,peakIndex,len-1,target,len);
            if(right==-1){
                return -1;
            }else{
                return right;
            }
        }else{
            return left;
        }
        
        return -1;
        // if(left==-1 && right==-1){
        //     return -1;
        // }else if(left==-1 && right!=-1){
        //     return right;
        // }else if(right==-1 && left!=-1){
        //     return left;
        // }else{
        //     return min(left,right);
        // }
    }
};