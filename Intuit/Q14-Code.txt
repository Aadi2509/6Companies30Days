//Solution accepted in leetcode

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int count=0;
        
        queue<pair<int,int>> q;
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,-1,1};
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    q.push({i,j});
                }
            }
        }
        
        while(!q.empty()){
            int sz=q.size();
            while(sz--){
                int x=q.front().first;
                int y=q.front().second;
                q.pop();
                for(int i=0;i<4;i++){
                    int nx=x+dx[i];
                    int ny=y+dy[i];
                    
                    if(nx<0 || ny<0 || nx>=n || ny>=m){
                        continue;
                    }
                    
                    if(grid[nx][ny]==0){
                        grid[nx][ny]=1;
                        q.push({nx,ny});
                    }
                }
            }
            
            if(!q.empty()){
                count++;
            }
        }
        
        
        if(count==0){
            return -1;
        }else{
            return count;
        }
        
    }
};