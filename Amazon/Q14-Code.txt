//Solution Accepted In GFG


#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
  
    void fillParentMap(Node *root,unordered_map<Node *,Node *> &parentMap,Node *&t,int target){
        // if(root==NULL){
        //     return;
        // }
        // if(root->data==target){
        //     t=root;
        // }
        queue<Node *> val;
        val.push(root);
        Node *p;
        while(!val.empty()){
            p=val.front();
            val.pop();
            if(p->data==target){
                t=p;
            }
            if(p->left!=NULL){
                parentMap[p->left]=p;
                val.push(p->left);
            }
            if(p->right!=NULL){
                parentMap[p->right]=p;
                val.push(p->right);
            }
        }
        
        return;
        
    }
    
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        unordered_map<Node *, Node *> parentMap;
        unordered_map<Node *,int> visited;
        queue<Node *> q;
        Node  *targetNode;
        int seconds=0;
        fillParentMap(root,parentMap,targetNode,target);
        
        if(parentMap.empty()){
            return 0;
        }
        
        q.push(targetNode);
        visited[targetNode]=1;
        while(!q.empty()){
            int k=q.size();
            int flag=0;
            for(int i=0;i<k;i++){
                Node *temp=q.front();
                q.pop();
                // int count=0;
                
                if(temp->left!=NULL && !visited[temp->left]){
                    flag=1;
                    q.push(temp->left);
                    visited[temp->left]=1;
                }
                if(temp->right!=NULL && !visited[temp->right]){
                    flag=1;
                    q.push(temp->right);
                    visited[temp->right]=1;
                }
                if(parentMap[temp] && !visited[parentMap[temp]]){
                    flag=1;
                    q.push(parentMap[temp]);
                    visited[parentMap[temp]]=1;
                }
                
                
            }
            if(flag==1){
                    seconds+=1;
                }
        }
        
        return seconds;
    }
};

// { Driver Code Starts.

int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        Solution obj;
        cout<<obj.minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}
  // } Driver Code Ends