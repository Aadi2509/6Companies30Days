//solution in Leetcode

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty()){
            return 0;
        }
        
        int time=0;
        int count=0;
        int totalOranges=0;
        
        queue<pair<int ,int>> q;
        
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]!=0){totalOranges++;}
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        
        int directionX[]={0,0,1,-1};//RLDU
        int directionY[]={1,-1,0,0};
        
        while(!q.empty()){
            int k=q.size();
            count+=k;
            while(k--){
                int X=q.front().first;
                int Y=q.front().second;
                q.pop();
                for(int i=0;i<4;i++){
                    int newX=X+directionX[i];
                    int newY=Y+directionY[i];
                    
                    if(newX<0 || newY<0 || newX>=grid.size() || newY>=grid[0].size() || grid[newX][newY]!=1){
                        continue;
                    }else{
                        grid[newX][newY]=2;
                        q.push({newX,newY});
                    }
                    
                    
                }
            }
            
            if(!q.empty()){time++;}
        }
        
        if(count==totalOranges){
            return time;
        }else{
            return -1;
        }
    }
};